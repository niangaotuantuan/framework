seq1 <- c(1,2,3,2,1,2,3,2,1)
mat1 <- matrix(seq1, 3)
seq2 <- rep(0, 9)
mat2 <- matrix(seq2, 3) # regularization via mat2 and mat3, version 0 only zero, indicating orthogological relations
mat12 <- cbind(mat1, mat2)
mat34 <- cbind(mat2, mat1)
W <- rbind(mat12, mat34)
cols <- colSums(W)
D <- diag(x=cols, nrow=6, ncol=6)
L <- D-W
eigens <- eigen(solve(D,L)) # generalized eigenvector problem
L  <- diag(rowSums(W)) - W # D-W, D is diagonal matrix
l <- nrow(L)
eigens <- NULL # eigenvectors
M <- NULL # object to be returned, p-dimentional embedding
eigenmap <- function(W, measure_type = c('unorm','norm'), p = 2) {
measure_type <- match.arg(measure_type)
if(nrow(W) != ncol(W)) {
print('Input weight matrix W must be symmetric')
return( NULL )
}
if(measure_type == 'norm') {
Ds <- diag(1/sqrt(rowSums(W)))
L_sym <- Ds %*% L %*% Ds
eigens <- eigen(L_sym, symmetric=T) # values ordered in decreasing order
M <- diag(Ds) * eigens$vectors[,(l-1):(l-p)]
}
if(measure_type == 'unorm') {
L  <- diag(rowSums(W)) - W  # corrosponding to the algorithm --> D-W
eigens <- eigen(L, symmetric=T) # values ordered in decreasing order
l <- nrow(L)
M <- eigens$vectors[,(l-1):(l-p)]
}
if(sum(eigens$values == 0) > 1) {
warning(paste('More than one non-zero eigenvalue - disjoint clusters. Multiplicity: ',
sum(eigens$values == 0)) )
}
colnames(M) <- paste0('component_', 1:p)
M <- data.frame(M)
return( M )
}
m <- 100
n <- 30
W1 <- diag(m)
W1[lower.tri(W1)] <- rnorm(sum(1:m-1))
W1[upper.tri(W1)] <- t(W1)[upper.tri(t(W1))] #symmetric matrix
W2 <- diag(n)
W2[lower.tri(W2)] <- rnorm(sum(1:n-1))
W2[upper.tri(W2)] <- t(W2)[upper.tri(t(W2))] #symmetric matrix
W12 <- matrix(data=rnorm(m*n),nrow=n,ncol=m)
W <- rbind(cbind(W1,t(W12)),cbind(W12,W2))
dim(W)
L  <- diag(rowSums(W)) - W # D-W, D is diagonal matrix
l <- nrow(L)
eigens <- NULL # eigenvectors
M <- NULL # object to be returned, p-dimentional embedding
eigenmap <- function(W, measure_type = c('unorm','norm'), p = 2) {
measure_type <- match.arg(measure_type)
if(nrow(W) != ncol(W)) {
print('Input weight matrix W must be symmetric')
return( NULL )
}
if(measure_type == 'norm') {
Ds <- diag(1/sqrt(rowSums(W)))
L_sym <- Ds %*% L %*% Ds
eigens <- eigen(L_sym, symmetric=T) # values ordered in decreasing order
M <- diag(Ds) * eigens$vectors[,(l-1):(l-p)]
}
if(measure_type == 'unorm') {
L  <- diag(rowSums(W)) - W  # corrosponding to the algorithm --> D-W
eigens <- eigen(L, symmetric=T) # values ordered in decreasing order
l <- nrow(L)
M <- eigens$vectors[,(l-1):(l-p)]
}
if(sum(eigens$values == 0) > 1) {
warning(paste('More than one non-zero eigenvalue - disjoint clusters. Multiplicity: ',
sum(eigens$values == 0)) )
}
colnames(M) <- paste0('component_', 1:p)
M <- data.frame(M)
return( M )
}
eigenmap(W,"unorm",p=3)
eigenmap(W,"unorm",p=2-)
eigenmap(W,"unorm",p=10)
install.packages("NLP")
install.packages("openNLP")
install.packages("openNLPmodels.en")
install.packages("NLTK")
library("NLTK")
?NLTK
library(tm)
install.packages("tm")
